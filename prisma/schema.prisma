generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum BEVERAGE_TYPES {
  NO_ICE
  ICE
  HOT
}

enum ORDER_STATUS {
  RECEIVED
  PENDING
  READY
}

enum SIZES {
  SMALL
  MEDIUM
  LARGE
}

enum ROLES {
  ADMIN
  CLIENT
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String
  firstName         String              @map("first_name")
  lastName          String              @map("last_name")
  dob               String              @map("date_of_birth")
  gender            GENDER?             @default(OTHER)
  orders            Order[]
  isActivated       Boolean?            @default(false) @map("is_activated")
  favoriteBeverages FavoriteBeverages[]
  publicKey         PublicKey?
  starsBalance      Int?                @default(0) @map("stars_balance")
  role              ROLES?              @default(CLIENT)
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@map("users")
}

model PublicKey {
  id        Int      @id @default(autoincrement())
  publicKey String   @unique @map("public_key")
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("public_keys")
}

model Order {
  id           Int                 @id @default(autoincrement())
  user         User                @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId       Int                 @map("user_id")
  price        Int
  starsCount   Int?                @default(0) @map("stars_count")
  beverages    BeveragesOnOrders[]
  status       ORDER_STATUS        @default(RECEIVED)
  additionally String?             @db.Text
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")

  @@map("orders")
}

model Beverage {
  id                Int                 @id @default(autoincrement())
  title             String              @unique
  description       String
  imgUrl            String              @map("img_url")
  price             Int
  starsCount        Int?                @default(0) @map("stars_count")
  orders            BeveragesOnOrders[]
  favoriteBeverages FavoriteBeverages[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@map("beverages")
}

model FavoriteBeverages {
  beverage   Beverage @relation(fields: [beverageId], references: [id], onDelete: Cascade)
  beverageId Int      @map("beverage_id")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([beverageId, userId])
  @@map("favorite_beverages")
}

model BeveragesOnOrders {
  beverage   Beverage @relation(fields: [beverageId], references: [id], onDelete: Cascade)
  beverageId Int      @map("beverage_id")

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int   @map("order_id")

  size SIZES          @default(SMALL)
  type BEVERAGE_TYPES
  qty  Int            @default(1)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([beverageId, orderId])
  @@map("beverages_on_orders")
}
